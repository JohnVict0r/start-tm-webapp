image: docker:stable

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - review
#  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

before_script:
  - docker info
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build:
  stage: build
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

lint:
  stage: test
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE npm run lint

test-components:
  stage: test
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE npm run test:component -- --coverage
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

release-image:
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master

deploy_review:
  stage: review
  environment:
    name: production
    url: http://192.168.1.1
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh-add <(echo "$SSH_PRIVATE_KEY");
    # - ssh -o StrictHostKeyChecking=no rayron@"$REVIEW_SERVER" 'bash -s' < 'REMOTE_APP_DIR=$REMOTE_APP_DIR';
    - ssh -o StrictHostKeyChecking=no rayron@"$REVIEW_SERVER" 'export REMOTE_APP_DIR='"'$REMOTE_APP_DIR'"';
    - ssh -o StrictHostKeyChecking=no rayron@"$REVIEW_SERVER" 'bash -s' < ./deploy.sh;
  when: manual
  only:
    - master
    - rayron

#deploy:
#  stage: deploy
#  script:
#    - ./deploy.sh
#  only:
#    - master
